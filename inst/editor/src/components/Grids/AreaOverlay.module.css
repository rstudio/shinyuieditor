.marker {
  font-weight: lighter;
  font-style: italic;
  padding: 2px;
  position: relative;
  /* // Disable pointer events on the container so we can passthrough drag and drop
    // and other click events to the actual element underneath the overlay */
  pointer-events: none;
  /* // I have no idea why I need to specify a z-index here to get this to sit
    // over the grid cell */
  z-index: 1;
}

.marker:hover {
  outline: 2px solid var(--rstudio-blue);
}

.marker:not(:global(.dragging)) {
  grid-area: var(--grid-area);
}

.marker:global(.dragging) {
  /* Enable pointer events when dragging so click events can be intercepted */
  pointer-events: all;
  grid-row-start: var(--drag-grid-row-start);
  grid-row-end: var(--drag-grid-row-end);
  grid-column-start: var(--drag-grid-column-start);
  grid-column-end: var(--drag-grid-column-end);
  background-color: var(--rstudio-blue-transparent);
}

.dragger {
  --dragger-short: 12px;
  --dragger-aspect: 2;
  --dragger-long: calc(var(--dragger-short) * var(--dragger-aspect));
  --offset-long: calc(50% - var(--dragger-long) / 2);
  display: grid;
  place-content: center;
  position: absolute;
  opacity: 0.2;
  background-color: var(--rstudio-blue);
  color: var(--rstudio-white);
  /* Re-enable pointer events on the drag handles themselves because we disabled
  it on the containing div to allow for passthrough of click events etc. */
  pointer-events: auto;
}

.dragger:hover {
  opacity: 1;
}

.dragger.move {
  height: var(--dragger-long);
  width: var(--dragger-long);
  left: var(--offset-long);
  top: var(--offset-long);
  cursor: grab;
}

.dragger:global(.up),
.dragger:global(.down) {
  height: var(--dragger-short);
  width: var(--dragger-long);
  left: var(--offset-long);
  cursor: ns-resize;
}

.dragger:global(.right),
.dragger:global(.left) {
  width: var(--dragger-short);
  height: var(--dragger-long);
  top: var(--offset-long);
  cursor: ew-resize;
}

.dragger:global(.up) {
  top: 0;
}
.dragger:global(.down) {
  bottom: 0;
}
.dragger:global(.right) {
  right: 0;
}
.dragger:global(.left) {
  left: 0;
}
