import { BooleanInput } from "../../components/Inputs/BooleanInput/BooleanInputSimple";
import { CSSUnitInput } from "../../components/Inputs/CSSUnitInput/CSSUnitInput";
import { NamedListInput } from "../../components/Inputs/ListInput/NamedListInput";
import { NumberInput } from "../../components/Inputs/NumberInput/NumberInput";
import { DropdownSelect } from "../../components/Inputs/OptionsDropdown/DropdownSelect";
import { RadioInputs } from "../../components/Inputs/RadioInputs/RadioInputsSimple";
import type {
  InputOptions,
  KnownInputFieldTypes,
} from "../../ui-node-definitions/inputFieldTypes";

import { IdInput } from "./IdInput";
import { StringInput } from "./StringInput";

type SettingsInputElementProps = InputOptions & {
  id: string;
  label: string;
  /**
   * Due to dynamics of types the on change callback is a very general purpose
   * function that can take any of our input types as arguments. Type narrowing is
   * not really beneficial here since we already know the type and the callback is
   * generated by the code not provided by the user.
   */
  onChange: (newValue: KnownInputFieldTypes) => void;
};

export function SettingsInputElement(args: SettingsInputElementProps) {
  switch (args.inputType) {
    case "string":
      return <StringInput {...args} />;
    case "number":
      return <NumberInput {...args} />;
    case "cssMeasure":
      return <CSSUnitInput {...args} />;
    case "boolean":
      return <BooleanInput {...args} />;
    case "list":
      return <NamedListInput {...args} />;
    case "dropdown":
      return <DropdownSelect {...args} />;
    case "radio":
      return <RadioInputs {...args} />;
    case "id":
      return <IdInput {...args} />;
    default:
      return (
        <div>
          I don't know how to render the input of type {args.inputType} yet!
          Sorry.
        </div>
      );
  }
}
