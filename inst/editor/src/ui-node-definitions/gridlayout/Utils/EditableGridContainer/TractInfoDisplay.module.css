.tractInfoDisplay {
  --transition-delay: 0.1s;
  --transition-speed: 0.1s;
  --transition-ease: ease-in-out;

  /* Start with no transition, this means returning to resting state after
    hovering will be instant */
  --expand-transition: none;

  /* This is used to scoot the container back into the margins of the grid */
  --offset: calc(-1 * var(--grid-pad));

  /* Controls if main widget is expanded. Setting to 1 unhides the controls */
  --scale: 0;

  /* Design specs */
  --size-widget-bg-color: hsla(220, 27%, 94%, 0.9);
  --size-widget-spacing: 5px;
  --add-button-diameter: 19px;
  --add-button-color: var(--icon-color);
  --delete-button-height: 20px;

  position: relative;

  z-index: 1;

  /* Initialize stacking frame here so we have predictable overlap placements */
  isolation: isolate;

  /* Place the item at the first row or column, The appropriate tract setting to
  place will be overridden within the direction selector */
  grid-column: 1;
  grid-row: 1;
}

/* Focus within here makes sure that the tract control doesn't dissapear if the
user is typing in the input field but mouses off */
.tractInfoDisplay:focus-within,
.tractInfoDisplay:hover {
  --scale: 100%;

  /* Transitioning into the hover state gets an animation */
  --expand-transition: transform var(--transition-speed) var(--transition-ease)
    var(--transition-delay);
  /* Make sure that the hovered display is always on top */
  z-index: 3;
}

.tractInfoDisplay[data-drag-dir="rows"] {
  grid-row: var(--tract-index);
  margin-left: var(--offset);
  width: fit-content;
}

.tractInfoDisplay[data-drag-dir="cols"] {
  grid-column: var(--tract-index);
  margin-top: var(--offset);
  height: fit-content;
}

.sizeWidget {
  position: absolute;
  transition: var(--expand-transition);
  padding: 2px;
  display: flex;
  align-items: center;
  gap: var(--size-widget-spacing);
  background-color: var(--size-widget-bg-color);
  height: 100%;
  width: 100%;
}
.tractInfoDisplay[data-drag-dir="rows"] > .sizeWidget {
  width: fit-content;
  border-radius: 0 var(--corner-radius) var(--corner-radius) 0;
  transform: scaleX(var(--scale));
  transform-origin: left;
  padding-right: var(--size-widget-spacing);
}

.cssSizeInput {
  width: 120px;
  display: flex;
}

.tractInfoDisplay[data-drag-dir="cols"] > .sizeWidget {
  height: fit-content;
  flex-direction: column;
  border-radius: 0 0 var(--corner-radius) var(--corner-radius);
  transform: scaleY(var(--scale));
  transform-origin: top;
  padding-bottom: var(--size-widget-spacing);
}

.hoverListener {
  position: absolute;

  /* Make it so the listener sticks over the edges and is a larger mouse-over target */
  --thickness: calc(2 * var(--grid-pad));
  --offset: calc(-1 * var(--grid-pad));

  /* Also offset the sides, leaving a bit of room for the user to drag the
  resize handle  */
  inset: calc(4px - var(--grid-pad));
}
.tractInfoDisplay[data-drag-dir="rows"] .hoverListener {
  width: var(--thickness);
  left: var(--offset);
}
.tractInfoDisplay[data-drag-dir="cols"] .hoverListener {
  height: var(--thickness);
  top: var(--offset);
}

.buttons {
  display: flex;
  justify-content: space-between;
}
.tractInfoDisplay[data-drag-dir="cols"] .buttons {
  width: 100%;
  flex-direction: row;
}
.tractInfoDisplay[data-drag-dir="rows"] .buttons {
  height: 100%;
  flex-direction: column;
}

.tractAddButton,
.deleteButton {
  --offset_amnt: 2px;
  --offset: calc(var(--offset_amnt) - var(--add-button-diameter));
  width: var(--add-button-diameter);
  height: var(--add-button-diameter);
  aspect-ratio: 1/1;
  display: grid;
  place-content: center;
  border-radius: 50%;
}

.tractAddButton {
  background-color: var(--add-button-color);
  color: var(--rstudio-white);
}

.deleteButton {
  background-color: transparent;
  font-size: var(--delete-button-height);
}

.deleteButton[data-enabled="true"] {
  color: var(--red);
}

.deleteButton[data-enabled="false"] {
  color: var(--disabled-color);
  cursor: not-allowed;
}
